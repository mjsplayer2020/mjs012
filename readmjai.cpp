/* ---------------------------------------------------------------------------------------------- 
 * 
 * プログラム概要 ： Newさくら麻雀(MJAIクライアント実装版)
 * バージョン     ： 0.1.2.124(アンカン実装)
 * プログラム名   ： mjs.exe
 * ファイル名     ： readmjai.cpp
 * クラス名       ： MJSReadMjai
 * 処理概要       ： MJAIログ読み込みクラス
 * Ver0.1.2作成日 ： 2023/10/07 22:32:26
 * 最終更新日     ： 2024/02/23 18:58:55
 * 
 * Copyright (c) 2022-2023 TechMileStoraJP, All rights reserved.
 * 
 * ---------------------------------------------------------------------------------------------- */

#include "readmjai.h"

/* ---------------------------------------------------------------------------------------------- */
// ログ処理開始処理
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::ReadlogMain(){

}

/* ---------------------------------------------------------------------------------------------- */
// 初期化処理
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::ReadlogInit(){

	// ----------------------------------------
	// 値の初期化
	// ----------------------------------------
	// wk_str_count = 0;

}

/* ---------------------------------------------------------------------------------------------- */
// 後処理
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::ReadlogPost(){

}

/* ---------------------------------------------------------------------------------------------- */
// 読み込み実行処理
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::ReadlogExec(MJSGui *gui){

	// Mjscore読み込み処理
	Read_logline(gui);

}

/* ---------------------------------------------------------------------------------------------- */
// mjscoreの読み込み
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::Read_logline(MJSGui *gui){

	// ----------------------------------------
	// 初期化
	// ----------------------------------------

	// wkインデックスの初期化
	gui->wk_str_count = 0;

	// 読み込み文字定義用
	int  line_buf_point;                //  fgetのバッファの位置取り
	char tmp_wk_str[1024];              //  1ワードのバッファ用
	char tmp_buf[3];                    //  分割処理用

	// 空白確認フラグ
	int space_flg;                      // 0：文字なし(空白スペースのみ) 1：空白以外の文字列

	// 値の初期化
	line_buf_point = 0;
	space_flg = 0;                      // 「空白」「改行」以外の半角文字を読込んだ場合は、「space_flg = 1」とする。
	wsprintf(tmp_wk_str, "");

	/* ---------------------------------------- */
	// fgetで取得した文字列を行末まで確認する
	/* ---------------------------------------- */
    while( line_buf[line_buf_point] != '\0' ){

		// 全角・半角の判定
		if(_ismbblead(line_buf[line_buf_point])){

			/* ---------------------------------------- */
			// 全角文字の格納
			/* ---------------------------------------- */
			tmp_buf[0] = line_buf[line_buf_point];
			tmp_buf[1] = line_buf[line_buf_point+1];
			tmp_buf[2] = '\0';
			line_buf_point+=2;

			// 全角文字処理
			space_flg = 1;
			wsprintf(tmp_wk_str, "%s%s", tmp_wk_str, tmp_buf);

		}else{

			/* ---------------------------------------- */
			// 半角文字の格納
			/* ---------------------------------------- */
			tmp_buf[0] = line_buf[line_buf_point];
			tmp_buf[1] = '\0';
			line_buf_point++;

			/* ---------------------------------------- */
			// 文字抽出(空白)
			/* ---------------------------------------- */
			if ( strcmp(tmp_buf, ":" ) == 0 || strcmp(tmp_buf, "," ) == 0 ){

				// 「空白区切り」で文字を追記
				if(space_flg == 1){
					space_flg = 0;

					// wk構造体に一時データを格納、その後tmp_wk_strは初期化
					Set_wk(gui, tmp_wk_str);
					wsprintf(tmp_wk_str, "");

				}

			/* ---------------------------------------- */
			// 無視文字
			/* ---------------------------------------- */
			}else if( strcmp(tmp_buf, "{") == 0  || 
			          strcmp(tmp_buf, "}") == 0  || 
			          strcmp(tmp_buf, "\"") == 0 || 
			          strcmp(tmp_buf, "[") == 0  || 
			          strcmp(tmp_buf, "]") == 0  ){

			/* ---------------------------------------- */
			// 文字抽出(改行)
			/* ---------------------------------------- */
			}else if(strcmp(tmp_buf, "\n") == 0){

				// 「空白区切り」で文字を追記
				if(space_flg == 1){
					space_flg = 0;

					// wk構造体に一時データを格納、その後tmp_wk_strは初期化
					Set_wk(gui, tmp_wk_str);
					wsprintf(tmp_wk_str, "");

				}

				// 「改行区切り」処理の場合は、間に「+」文字を挿入する
				wsprintf(tmp_wk_str, "+");
				Set_wk(gui, tmp_wk_str);

				// 値の初期化
				wsprintf(tmp_wk_str, "");

			/* ---------------------------------------- */
			// その他の文字抽出
			/* ---------------------------------------- */
			}else{

				// 「空白」「改行」以外の半角文字処理
				space_flg = 1;
				wsprintf(tmp_wk_str, "%s%s", tmp_wk_str, tmp_buf);

			}

		}

	}

}

/* ---------------------------------------------------------------------------------------------- */
// wk構造体に一時データを格納
/* ---------------------------------------------------------------------------------------------- */
void MJSReadMjai::Set_wk(MJSGui *gui, char* str){

	wsprintf(gui->wk_str[gui->wk_str_count], "%s", str);
	gui->wk_str_count++;

}

/* ---------------------------------------------------------------------------------------------- 
 * ソース終了
 * ---------------------------------------------------------------------------------------------- */
